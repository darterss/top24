import 'dotenv/config';
import TelegramBot from 'node-telegram-bot-api';
import fetch from 'node-fetch';

const token = process.env.BOT_TOKEN;
if (!token) {
  console.error('BOT_TOKEN is not set');
  process.exit(1);
}

console.log('Starting bot with token:', token.substring(0, 10) + '...');
const backendUrl = process.env.BACKEND_URL || 'http://backend:3001/api';
console.log('Backend URL:', backendUrl);

const bot = new TelegramBot(token, { polling: true });

bot.on('polling_error', (error) => {
  console.error('Polling error:', error);
});

bot.on('error', (error) => {
  console.error('Bot error:', error);
});

console.log('Bot started, waiting for messages...');

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ–Ω—é –∫–æ–º–∞–Ω–¥
bot.setMyCommands([
  { command: 'start', description: 'üöÄ –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º' },
  { command: 'idea', description: 'üí° –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∏–¥–µ—é –ø—Ä–æ–µ–∫—Ç–∞' },
  { command: 'projects', description: 'üìã –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã' },
  { command: 'update', description: '‚úèÔ∏è –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏' },
  { command: 'report', description: 'üìä –ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á—ë—Ç –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º' },
  { command: 'help', description: '‚ùì –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º' }
]);

const state = new Map();

bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id;
  state.delete(chatId);
  await bot.sendMessage(chatId, `üöÄ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AI Project Tracker!**

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º:
‚Ä¢ üí° –°–æ–∑–¥–∞–≤–∞—Ç—å –∏–¥–µ–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å AI roadmap
‚Ä¢ üìã –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á
‚Ä¢ üìä –ü–æ–ª—É—á–∞—Ç—å —É–º–Ω—ã–µ –æ—Ç—á—ë—Ç—ã –æ—Ç AI

**–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã:**
–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –∏–º—è –∏ email —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:
\`–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤, ivan@example.com\`

**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ /idea <–Ω–∞–∑–≤–∞–Ω–∏–µ> - –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç
‚Ä¢ /projects - –ú–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã  
‚Ä¢ /update <–∏–¥–µ—è> <–∑–∞–¥–∞—á–∞> <—Å—Ç–∞—Ç—É—Å> - –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É
‚Ä¢ /report - –û—Ç—á—ë—Ç –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º
‚Ä¢ /help - –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞`, { parse_mode: 'Markdown' });
  state.set(chatId, { step: 'register' });
});

bot.onText(/\/help/, async (msg) => {
  const chatId = msg.chat.id;
  const helpText = `ü§ñ **AI Project Tracker - –°–ø—Ä–∞–≤–∫–∞**

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ /start - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ
‚Ä¢ /idea <–Ω–∞–∑–≤–∞–Ω–∏–µ> - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∏–¥–µ—é –ø—Ä–æ–µ–∫—Ç–∞
‚Ä¢ /projects - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –≤–∞—à–∏ –ø—Ä–æ–µ–∫—Ç—ã
‚Ä¢ /update <–∏–¥–µ—è> <–∑–∞–¥–∞—á–∞> <—Å—Ç–∞—Ç—É—Å> - –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
‚Ä¢ /report - –ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á—ë—Ç –ø–æ –≤—Å–µ–º –ø—Ä–æ–µ–∫—Ç–∞–º
‚Ä¢ /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

**–ü—Ä–∏–º–µ—Ä—ã:**
‚Ä¢ /idea –ú–æ–π –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç
‚Ä¢ /update 1 2 done
‚Ä¢ /update 2 1 in_progress

**–°—Ç–∞—Ç—É—Å—ã –∑–∞–¥–∞—á:**
‚Ä¢ TODO - –ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é
‚Ä¢ IN_PROGRESS - –í —Ä–∞–±–æ—Ç–µ  
‚Ä¢ DONE - –í—ã–ø–æ–ª–Ω–µ–Ω–æ

–£–¥–∞—á–∏ –≤ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –≤–∞—à–∏—Ö –∏–¥–µ–π! üöÄ`;
  
  await bot.sendMessage(chatId, helpText, { parse_mode: 'Markdown' });
});

bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text || '';
  const s = state.get(chatId);
  if (s?.step === 'register' && text && !text.startsWith('/')) {
    const [name, email] = text.split(',').map((t) => t.trim());
    if (!name || !email) {
      return bot.sendMessage(chatId, '–§–æ—Ä–º–∞—Ç: –ò–º—è –§–∞–º–∏–ª–∏—è, email');
    }
    try {
      const res = await fetch(`${backendUrl}/users`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ name, email, telegramId: String(chatId) }),
      });
      if (!res.ok) throw new Error('registration failed');
      await bot.sendMessage(chatId, '–ì–æ—Ç–æ–≤–æ! –ò—Å–ø–æ–ª—å–∑—É–π /idea —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–¥–µ—é.');
    } catch (e) {
      await bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
    } finally {
      state.delete(chatId);
    }
  }
});

bot.onText(/\/idea (.+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const title = (match?.[1] || '').trim();
  if (!title) return bot.sendMessage(chatId, '–£–∫–∞–∂–∏ –∏–¥–µ—é: /idea –ú–æ–π –ø—Ä–æ–µ–∫—Ç');
  try {
    let resUser = await fetch(`${backendUrl}/users/by-telegram/${chatId}`);
    let user;
    if (resUser.ok) {
      user = await resUser.json();
    } else {
      // auto-register if not found
      const fullName = [msg.from?.first_name, msg.from?.last_name].filter(Boolean).join(' ') || `tg_${chatId}`;
      const email = `${chatId}@telegram.local`;
      const reg = await fetch(`${backendUrl}/users`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ name: fullName, email, telegramId: String(chatId) }),
      });
      if (!reg.ok) throw new Error('auto-register failed');
      user = await reg.json();
    }
    const aiRes = await fetch(`${backendUrl}/ai/roadmap`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ title }),
    });
    const ai = await aiRes.json();
    const create = await fetch(`${backendUrl}/ideas`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ userId: user.id, title, description: ai.description, tasks: ai.tasks ?? [] }),
    });
    const idea = await create.json();
    const tasksList = idea.tasks.map((t) => `${t.index}. ${t.title}`).join('\n');
    await bot.sendMessage(chatId, `–°–æ–∑–¥–∞–Ω–æ!\n${tasksList}`);
  } catch (e) {
    await bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–¥–µ–∏.');
  }
});

bot.onText(/\/projects/, async (msg) => {
  const chatId = msg.chat.id;
  try {
    const resUser = await fetch(`${backendUrl}/users/by-telegram/${chatId}`);
    const user = await resUser.json();
    const res = await fetch(`${backendUrl}/ideas/${user.id}`);
    const ideas = await res.json();
    const text = ideas
      .map((i, idx) => {
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –ø–æ index –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞
        const sortedTasks = i.tasks.sort((a, b) => a.index - b.index);
        return `#${idx + 1}. ${i.title}\n` + sortedTasks.map((t, taskIdx) => `  ${taskIdx + 1}. ${t.title} ‚Äî ${t.status}`).join('\n');
      })
      .join('\n\n');
    await bot.sendMessage(chatId, text || '–ü–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤');
  } catch {
    await bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤.');
  }
});

bot.onText(/\/update (\d+) (\d+) (.+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const ideaIndex = Number(match?.[1] ?? 0);
  const taskIndex = Number(match?.[2] ?? 0);
  const statusInput = match?.[3]?.toUpperCase();
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Å—Ç–∞—Ç—É—Å–∞
  const validStatuses = ['TODO', 'IN_PROGRESS', 'DONE'];
  if (!validStatuses.includes(statusInput)) {
    return bot.sendMessage(chatId, `‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å: "${match?.[3]}"\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã:\n‚Ä¢ TODO\n‚Ä¢ IN_PROGRESS\n‚Ä¢ DONE\n\n–ü—Ä–∏–º–µ—Ä: /update 1 2 done`);
  }
  
  try {
    const user = await (await fetch(`${backendUrl}/users/by-telegram/${chatId}`)).json();
    const ideas = await (await fetch(`${backendUrl}/ideas/${user.id}`)).json();
    const idea = ideas[ideaIndex - 1];
    if (!idea) return bot.sendMessage(chatId, `‚ùå –ò–¥–µ—è #${ideaIndex} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.`);
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –ø–æ index –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞
    const sortedTasks = idea.tasks.sort((a, b) => a.index - b.index);
    const task = sortedTasks[taskIndex - 1];
    if (!task) return bot.sendMessage(chatId, `‚ùå –ó–∞–¥–∞—á–∞ #${taskIndex} –≤ –∏–¥–µ–µ "${idea.title}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.`);
    
    await fetch(`${backendUrl}/ideas/task/${task.id}`, {
      method: 'PATCH',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ status: statusInput }),
    });
    await bot.sendMessage(chatId, `‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω: "${idea.title}" - –∑–∞–¥–∞—á–∞ #${taskIndex} ‚Üí ${statusInput}`);
  } catch (error) {
    console.error('Update error:', error);
    await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞.');
  }
});

bot.onText(/\/report/, async (msg) => {
  const chatId = msg.chat.id;
  try {
    const user = await (await fetch(`${backendUrl}/users/by-telegram/${chatId}`)).json();
    const ideas = await (await fetch(`${backendUrl}/ideas/${user.id}`)).json();
    
    if (ideas.length === 0) {
      return bot.sendMessage(chatId, 'üìä –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è –æ—Ç—á—ë—Ç–∞.');
    }
    
    let reportText = 'üìä **–ï–ñ–ï–î–ù–ï–í–ù–´–ô –û–¢–ß–Å–¢**\n\n';
    
    for (const idea of ideas) {
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –ø–æ index
      const sortedTasks = idea.tasks.sort((a, b) => a.index - b.index);
      const total = sortedTasks.length;
      const done = sortedTasks.filter(t => t.status === 'DONE').length;
      const inProgress = sortedTasks.filter(t => t.status === 'IN_PROGRESS').length;
      const completedPercent = total > 0 ? Math.round((done / total) * 100) : 0;
      
      reportText += `üéØ **${idea.title}**\n`;
      reportText += `üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: ${completedPercent}% (${done}/${total} –∑–∞–¥–∞—á)\n`;
      reportText += `üîÑ –í —Ä–∞–±–æ—Ç–µ: ${inProgress} –∑–∞–¥–∞—á\n`;
      
      // –ü–æ–ª—É—á–∞–µ–º AI –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è —ç—Ç–æ–π –∏–¥–µ–∏
      try {
        const aiReport = await (await fetch(`${backendUrl}/ai/review/${idea.id}`, { method: 'POST' })).json();
        reportText += `ü§ñ AI: ${aiReport.comment}\n`;
      } catch {
        reportText += `ü§ñ AI: –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ä–∞–±–æ—Ç—É –Ω–∞–¥ –ø—Ä–æ–µ–∫—Ç–æ–º.\n`;
      }
      
      reportText += '\n';
    }
    
    await bot.sendMessage(chatId, reportText, { parse_mode: 'Markdown' });
  } catch (error) {
    console.error('Report error:', error);
    await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á—ë—Ç–∞.');
  }
});


